{"version":3,"sources":["RecipeProvider.js","components/Showcase.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["RecipeContext","createContext","apikey","RecipeProvider","props","useState","cuisine","setCuisine","recipeData","setRecipeData","apiUrl","setApiUrl","fetchUrl","setFetch","Provider","value","children","Showcase","useContext","recipeIndex","setRecipeIndex","fetchData","useEffect","recipeIngredients","recipes","extendedIngredients","map","ingredient","originalName","amount","unit","img","image","className","title","src","alt","ReactHtmlParser","summary","instructions","href","sourceUrl","creditsText","type","onClick","length","prevIndex","console","log","cuisines","Form","submit","setSubmit","url","fetch","then","response","json","data","catch","err","cuisineFormElement","key","onSubmit","event","preventDefault","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0aa8826c.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\n\r\nexport const RecipeContext = createContext();\r\n\r\nconst apikey = \"1ffa7b107be542628559e1c6b957e2ee\";\r\n\r\nexport const RecipeProvider = (props) => {\r\n  const [cuisine, setCuisine] = useState(\"african\");\r\n  const [recipeData, setRecipeData] = useState();\r\n  const [apiUrl, setApiUrl] = useState(\r\n    `https://api.spoonacular.com/recipes/random?apiKey=${apikey}&number=10&tags=`\r\n  );\r\n  const [fetchUrl, setFetch] = useState(\r\n    `https://api.spoonacular.com/recipes/random?apiKey=${apikey}&number=5&tags=`\r\n  );\r\n\r\n  return (\r\n    <RecipeContext.Provider\r\n      value={[\r\n        cuisine,\r\n        setCuisine,\r\n        recipeData,\r\n        setRecipeData,\r\n        apiUrl,\r\n        setApiUrl,\r\n        fetchUrl,\r\n        setFetch,\r\n      ]}\r\n    >\r\n      {props.children}\r\n    </RecipeContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { RecipeContext } from \"../RecipeProvider.js\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport \"../styles.css\";\r\n\r\nconst Showcase = (props) => {\r\n  const [\r\n    cuisine,\r\n    setCuisine,\r\n    recipeData,\r\n    setRecipeData,\r\n    apiUrl,\r\n    setApiUrl,\r\n    fetchUrl,\r\n    setFetch,\r\n  ] = useContext(RecipeContext);\r\n\r\n  //   const recipeArray = recipeData.map((recipe) => {\r\n  //     return recipe;\r\n  //   });\r\n\r\n  const [recipeIndex, setRecipeIndex] = useState(0);\r\n\r\n  const fetchData = props.fetchData;\r\n  useEffect(() => {\r\n    setRecipeIndex(0);\r\n  }, [fetchUrl]);\r\n\r\n  const nextRecipe = () => {\r\n    if (recipeData.recipes.length - 1 === recipeIndex) {\r\n      setRecipeIndex(0);\r\n      fetchData(fetchUrl);\r\n    } else {\r\n      setRecipeIndex((prevIndex) => prevIndex + 1);\r\n    }\r\n\r\n    console.log(recipeIndex);\r\n  };\r\n\r\n  // };\r\n\r\n  //extracting recipe data in constants.\r\n\r\n  let recipeIngredients = recipeData.recipes[\r\n    recipeIndex\r\n  ].extendedIngredients.map((ingredient) => {\r\n    return (\r\n      <li>\r\n        {ingredient.originalName}: {ingredient.amount} {ingredient.unit}\r\n      </li>\r\n    );\r\n  });\r\n\r\n  let img = recipeData.recipes[recipeIndex].image;\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"recipe-title\">{recipeData.recipes[recipeIndex].title}</h2>\r\n      <div>\r\n        {img ? (\r\n          <img\r\n            className=\"recipe-img\"\r\n            src={recipeData.recipes[recipeIndex].image}\r\n            alt=\"recipe img\"\r\n          />\r\n        ) : (\r\n          <img\r\n            className=\"recipe-img\"\r\n            src=\"https://user-images.githubusercontent.com/24848110/33519396-7e56363c-d79d-11e7-969b-09782f5ccbab.png\"\r\n            alt=\"recipe img\"\r\n          />\r\n        )}\r\n      </div>\r\n      <h3>Summary</h3>\r\n      <p>{ReactHtmlParser(recipeData.recipes[recipeIndex].summary)}</p>\r\n      <h3>Ingredients:</h3>\r\n      <ul>{recipeIngredients}</ul>\r\n      <h3>Step by Step</h3>\r\n      <p>{ReactHtmlParser(recipeData.recipes[recipeIndex].instructions)}</p>\r\n      <p>\r\n        Credits{\" \"}\r\n        <a href={recipeData.recipes[recipeIndex].sourceUrl}>\r\n          {recipeData.recipes[recipeIndex].creditsText}\r\n        </a>{\" \"}\r\n      </p>{\" \"}\r\n      <button className=\"button\" type=\"submit\" onClick={nextRecipe}>\r\n        Next Recipe{\" \"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Showcase;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { RecipeContext } from \"../RecipeProvider.js\";\r\nimport Showcase from \"./Showcase.js\";\r\nimport \"../styles.css\";\r\n//Material UI imports\r\n// import FormControl from \"@material-ui/core/FormControl\";\r\n// import Select from \"@material-ui/core/Select\";\r\n// import InputLabel from \"@material-ui/core/InputLabel\";\r\n// import Button from \"@material-ui/core/Button\";\r\n\r\nconst cuisines = [\r\n  \"african\",\r\n  \"american\",\r\n  \"british\",\r\n  \"cajun\",\r\n  \"caribbean\",\r\n  \"chinese\",\r\n  \"european\",\r\n  \"french\",\r\n  \"german\",\r\n  \"greek\",\r\n  \"indian\",\r\n  \"irish\",\r\n  \"italian\",\r\n  \"japanese\",\r\n  \"jewish\",\r\n  \"korean\",\r\n  \"mediterranean\",\r\n  \"mexican\",\r\n  \"nordic\",\r\n  \"shouthern\",\r\n  \"spanish\",\r\n  \"thai\",\r\n  \"viatnamese\",\r\n];\r\n\r\nconst Form = () => {\r\n  //import context\r\n  const [\r\n    cuisine,\r\n    setCuisine,\r\n    recipeData,\r\n    setRecipeData,\r\n    apiUrl,\r\n    setApiUrl,\r\n    fetchUrl,\r\n    setFetch,\r\n  ] = useContext(RecipeContext);\r\n\r\n  //state\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  //function to update recipeData from api response\r\n  const fetchData = (url) => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setRecipeData(data);\r\n        return setSubmit(true);\r\n      })\r\n      .catch((err) => {\r\n        return 1;\r\n      });\r\n  };\r\n\r\n  //call fetchData from the form\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    fetchData(fetchUrl);\r\n  };\r\n\r\n  //updates the fetch api as soon as the button is clicked\r\n  const updateFetch = () => {\r\n    setFetch(apiUrl + cuisine);\r\n  };\r\n\r\n  //change the cuisine in the state.\r\n  const handleChange = (event) => {\r\n    setCuisine(event.target.value);\r\n  };\r\n\r\n  //generate an array of option elements to display.\r\n  const cuisineFormElement = cuisines.map((cuisine) => {\r\n    return (\r\n      <option key={cuisine} value={cuisine}>\r\n        {cuisine}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  //return of\r\n  return (\r\n    <div className=\"form-container\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <h1 className=\"form-title\">Whats craving?</h1>\r\n          <select\r\n            className=\"select-css\"\r\n            value={cuisine}\r\n            onChange={handleChange}\r\n          >\r\n            {cuisineFormElement}\r\n          </select>\r\n        </label>\r\n        <input\r\n          className=\"button\"\r\n          type=\"submit\"\r\n          value=\"Bring me Something!\"\r\n          onClick={updateFetch}\r\n        />\r\n      </form>\r\n      <div className=\"recipe-show\">\r\n        {submit && <Showcase fetchData={fetchData} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport Form from \"./components/Form.js\";\nimport Showcase from \"./components/Showcase.js\";\nimport { RecipeProvider } from \"./RecipeProvider.js\";\nimport Container from \"./components/Container\";\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <RecipeProvider>\n      <div className=\"app-container\">\n        <Form />\n      </div>\n    </RecipeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}